{"version":3,"sources":["components/layout/stories/Story.tsx","components/pages/Stories.tsx"],"names":["Screen","styled","div","ZIndex","POST","OVERLAY","Story","props","index","onInView","onFinished","active","React","useState","ref","setRef","useIsOnScreen","isInView","useSelector","selectPostByIndex","type","preview_url","sample_url","file_url","width","height","useEffect","scrollIntoView","id","Media","thumbnailSrc","sampleSrc","fullSrc","onLoad","NO_OP","detailsVisible","isFullscreen","isActive","StoriesWrapper","Filler","css","Math","max","Stories","dispatch","useDispatch","history","useHistory","currentIdx","selectFullsceenIndex","postCount","selectCount","nextIdx","indexes","setIndex","useCallback","setFullscreenPost","scrollToNext","document","getElementById","behavior","handler","fullscreenElement","goBack","addEventListener","passive","removeEventListener","openFullscreen","map"],"mappings":"ySAQMA,EAASC,IAAOC,IAAV,mYAcGC,IAAOC,KAIPD,IAAOE,SAiBP,SAASC,EAAMC,GAC5B,IAAQC,EAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,SAAUC,EAA+BH,EAA/BG,WAAzB,EAAwDH,EAAnBI,cAArC,SACA,EAAsBC,IAAMC,SAA6B,MAAzD,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAmBC,YAAcF,GAA1BG,EAAP,oBACA,EAAmEC,YAAYC,YAAkBX,IAAzFY,EAAR,EAAQA,KAAMC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,WAAYC,EAAvC,EAAuCA,SAAUC,EAAjD,EAAiDA,MAAOC,EAAxD,EAAwDA,OAcxD,OAZAb,IAAMc,WAAU,WACVf,GAAUG,GACZA,EAAIa,mBAEL,CAAChB,EAAQG,IAEZF,IAAMc,WAAU,WACVjB,GAAYQ,GACdR,EAASD,KAEV,CAACA,EAAOS,EAAUR,IAGnB,cAACT,EAAD,CAAQ4B,GAAE,gBAAWpB,GAASM,IAAKC,EAAnC,SACE,cAACc,EAAA,EAAD,CACET,KAAMA,EACNZ,MAAOA,EACPsB,aAAcT,EACdU,UAAWT,EACXU,QAAST,EACTU,OAAQC,IACRV,MAAOA,EACPC,OAAQA,EACRU,gBAAgB,EAChBC,cAAc,EACd1B,WAAYA,EACZ2B,SAAUpB,MCjElB,IAAMqB,EAAiBrC,IAAOC,IAAV,sNAiBdqC,EAAStC,IAAOC,KACpB,gBAAGM,EAAH,EAAGA,MAAH,OAA4BgC,YAA3B,IAAD,+CACYC,KAAKC,IAAIlC,EAAQ,EAAG,OAI5BR,EAASC,IAAOC,IAAV,wUAoBG,SAASyC,IACtB,IAAMC,EAAWC,cACXC,EAAUC,cAEhB,EAAsBnC,IAAMC,SAA6B,MAAzD,mBAAOC,EAAP,KAAYC,EAAZ,KAEMiC,EAAa9B,YAAY+B,KACzBC,EAAYhC,YAAYiC,KACxBC,EAAUJ,EAAa,EAGvBK,EAAU,CAFAL,EAAa,EAEHA,EAAYI,GAEhCE,EAAW1C,IAAM2C,aAAY,SAAC/C,GAAD,OAAmBoC,EAASY,YAAkBhD,MAAS,CAACoC,IAErFa,EAAe7C,IAAM2C,aAAY,WAAO,IAAD,EAC3C,UAAAG,SAASC,eAAT,gBAAiCP,WAAjC,SAA6CzB,eAAe,CAAEiC,SAAU,aACvE,CAACR,IAsBJ,OApBAxC,IAAMc,WAAU,WACd,IAAMmC,EAAU,WACTH,SAASI,mBACZhB,EAAQiB,UAMZ,OAFAL,SAASM,iBAAiB,mBAAoBH,EAAS,CAAEI,SAAS,IAE3D,WACLP,SAASQ,oBAAoB,mBAAoBL,MAElD,CAACf,IAEJlC,IAAMc,WAAU,WACVZ,GACFqD,YAAerD,KAEhB,CAACA,IAGF,eAACwB,EAAD,CAAgBxB,IAAKC,EAArB,UACE,cAACwB,EAAD,CAAQ/B,MAAOwC,IACdK,EAAQe,KAAI,SAAC5D,GACZ,OAAIA,EAAQ,EAAU,KAClBA,GAAS0C,EAET,cAAC,EAAD,UACE,cAAC,IAAD,KADW1C,GAIbA,EAAQwC,GACRxC,EAAQwC,EADmB,cAAC1C,EAAD,CAAmBE,MAAOA,EAAOC,SAAU6C,GAA/B9C,GAEpC,cAACF,EAAD,CAAmBE,MAAOA,EAAOE,WAAY+C,EAAc9C,QAAM,GAArDH","file":"static/js/11.a054b4fb.chunk.js","sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { NO_OP } from '../../../data/types'\nimport useIsOnScreen from '../../../hooks/useIsOnScreen'\nimport { selectPostByIndex } from '../../../redux/selectors'\nimport { ZIndex } from '../../../styled/zIndex'\nimport { Media } from '../../player/Media'\nconst Screen = styled.div`\n  min-height: 100vh;\n  min-width: 100vw;\n  max-height: 100vh;\n  max-width: 100vw;\n  scroll-snap-align: start;\n  scroll-snap-stop: always;\n\n  display: grid;\n\n  img,\n  video {\n    max-height: 100vh;\n    max-width: 100vw;\n    z-index: ${ZIndex.POST};\n  }\n\n  .overlay {\n    z-index: ${ZIndex.OVERLAY};\n  }\n\n  img,\n  video,\n  .overlay {\n    grid-area: 1/1/2/2;\n  }\n`\n\ninterface StoryProps {\n  index: number\n  onInView?: (index: number) => void\n  onFinished?: () => void\n  active?: boolean\n}\n\nexport default function Story(props: StoryProps) {\n  const { index, onInView, onFinished, active = false } = props\n  const [ref, setRef] = React.useState<HTMLElement | null>(null)\n  const [isInView] = useIsOnScreen(ref)\n  const { type, preview_url, sample_url, file_url, width, height } = useSelector(selectPostByIndex(index))\n\n  React.useEffect(() => {\n    if (active && ref) {\n      ref.scrollIntoView()\n    }\n  }, [active, ref])\n\n  React.useEffect(() => {\n    if (onInView && isInView) {\n      onInView(index)\n    }\n  }, [index, isInView, onInView])\n\n  return (\n    <Screen id={`story-${index}`} ref={setRef}>\n      <Media\n        type={type}\n        index={index}\n        thumbnailSrc={preview_url}\n        sampleSrc={sample_url}\n        fullSrc={file_url}\n        onLoad={NO_OP}\n        width={width}\n        height={height}\n        detailsVisible={false}\n        isFullscreen={true}\n        onFinished={onFinished}\n        isActive={isInView}\n      />\n    </Screen>\n  )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport styled, { css } from 'styled-components'\nimport { openFullscreen } from '../../data/browserUtils'\nimport { setFullscreenPost } from '../../redux/actions'\nimport { selectCount, selectFullsceenIndex } from '../../redux/selectors'\nimport { OutOfItems } from '../layout/LayoutOutOfItems'\nimport Story from '../layout/stories/Story'\n\nconst StoriesWrapper = styled.div`\n  height: 100vh;\n  width: 100vw;\n  overflow: scroll;\n  scroll-snap-type: y mandatory;\n  scroll-snap-stop: always;\n\n  ::-webkit-scrollbar {\n    height: 0px;\n    width: 0px;\n  }\n`\n\ntype FillerProps = {\n  index: number\n}\n\nconst Filler = styled.div(\n  ({ index }: FillerProps) => css`\n    height: ${Math.max(index - 1, 0)}00vh;\n  `\n)\n\nconst Screen = styled.div`\n  min-height: 100vh;\n  min-width: 100vw;\n  max-height: 100vh;\n  max-width: 100vw;\n\n  scroll-snap-align: start;\n  scroll-snap-stop: always;\n\n  display: grid;\n  place-content: center;\n\n  @media (pointer: fine) {\n    ::-webkit-scrollbar {\n      height: 0px;\n      width: 0px;\n    }\n  }\n`\n\nexport default function Stories() {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const [ref, setRef] = React.useState<HTMLElement | null>(null)\n\n  const currentIdx = useSelector(selectFullsceenIndex)\n  const postCount = useSelector(selectCount)\n  const nextIdx = currentIdx + 1\n  const prevIdx = currentIdx - 1\n\n  const indexes = [prevIdx, currentIdx, nextIdx]\n\n  const setIndex = React.useCallback((index: number) => dispatch(setFullscreenPost(index)), [dispatch])\n\n  const scrollToNext = React.useCallback(() => {\n    document.getElementById(`story-${nextIdx}`)?.scrollIntoView({ behavior: 'smooth' })\n  }, [nextIdx])\n\n  React.useEffect(() => {\n    const handler = () => {\n      if (!document.fullscreenElement) {\n        history.goBack()\n      }\n    }\n\n    document.addEventListener('fullscreenchange', handler, { passive: true })\n\n    return () => {\n      document.removeEventListener('fullscreenchange', handler)\n    }\n  }, [history])\n\n  React.useEffect(() => {\n    if (ref) {\n      openFullscreen(ref)\n    }\n  }, [ref])\n\n  return (\n    <StoriesWrapper ref={setRef}>\n      <Filler index={currentIdx} />\n      {indexes.map((index) => {\n        if (index < 0) return null\n        if (index >= postCount)\n          return (\n            <Screen key={index}>\n              <OutOfItems />\n            </Screen>\n          )\n        if (index < currentIdx) return <Story key={index} index={index} onInView={setIndex} />\n        if (index > currentIdx) return <Story key={index} index={index} onInView={setIndex} />\n        return <Story key={index} index={index} onFinished={scrollToNext} active />\n      })}\n    </StoriesWrapper>\n  )\n}\n"],"sourceRoot":""}