{"version":3,"sources":["hooks/useIsOnScreen.tsx","styled/animations.tsx","components/designsystem/Slider.tsx","icons/PlayPauseIcon.tsx","components/player/ToggleFullscreenButton.tsx","components/player/LinkList.tsx","components/player/Overlay.tsx","components/player/ProgressBar.tsx","components/player/FullscreenProgressBar.tsx","components/designsystem/FlexVideo.tsx","components/player/media/StyledMedia.ts","components/player/media/Picture.tsx","hooks/useIsScrolling.tsx","hooks/useAutoplay.tsx","components/player/media/Gif.tsx","components/player/media/Video.tsx","components/player/Media.tsx","hooks/useSources.tsx","components/widgets/ScrollToTopButton.tsx","components/layout/LayoutOutOfItems.tsx"],"names":["handlers","observer","IntersectionObserver","entries","forEach","entry","handler","find","h","element","target","update","isIntersecting","threshold","useIsOnScreen","React","useState","isOnScreen","setOnScreen","onIsOnScreenChange","useCallback","value","useEffect","push","observe","filter","unobserve","fadeOut","keyframes","Slider","styled","input","$controls","$accent","theme","css","props","colors","layerBg","accentColor","backgroundColor2","trackStyle","commonStyle","thumbStyle","MorphSvg","svg","ToggleButton","InvisButton","dropShadow","dimensions","bigSpacing","ToggleFullscreenButton","index","dispatch","useDispatch","history","useHistory","onFullscreenExit","event","stopPropagation","goBack","scrollToPost","onFullscreenEnter","setFullscreenPost","RouteName","STORIES","location","pathname","onClick","title","color","Wrapper","div","flexRowWithGap","LinkButton","a","timings","transitionTime","DownloadButton","LinkList","fullSrc","handleDownload","download","href","rel","isVisible","VideoProgressBar","isPaused","videoRef","className","onChange","onEnded","sliderRef","useRef","useTheme","handleChange","newValue","Number","handleClick","addEventListener","removeEventListener","handle","requestAnimationFrame","step","current","currentTime","toString","chromePercentage","duration","style","backgroundImage","cancelAnimationFrame","ref","type","min","max","AutoProgressBar","onFinished","NO_OP","isActive","mouseState","setMouseState","setPost","newIndex","useSelector","selectAutoscrollDelay","listener","document","then","Date","getTime","renderFrame","now","PlayButton","name","viewBox","xmlns","x","y","width","height","LengthDisplay","span","spacing","ForwardArea","BackwardArea","ImageOverlay","isFullscreen","GifOverlay","onTogglePaused","VideoOverlay","onSeek","handleSkipForward","e","preventDefault","handleSkipBackward","onDoubleClick","tabIndex","formatDuration","getOverlayContent","Overlay","setVisible","toggleVisible","FlexVideo","video","flexMedia","preserveAspectRatio","PostVideo","mediaStyle","PostImage","FlexImage","Picture","viewSrc","onLoad","src","alt","loading","timeoutId","isScrollingGlobal","observers","useAutoplay","shouldPlay","setShouldPlay","isScrolling","setIsScrolling","undefined","clearTimeout","setTimeout","passive","length","useIsScrolling","Gif","thumbnailSrc","detailsVisible","overlayVisible","setOverlayVisible","playState","setPlayState","gifRef","setGifRef","prefAutoplay","selectAutoPlay","autoPlay","preload","selectPreloadGifs","usedSource","play","pause","togglePlay","Image","Video","setVideoRef","selectPreloadVideos","paused","message","includes","console","warn","error","err","handleSeek","controls","loop","onLoadedMetadata","Media","sampleSrc","loadOriginals","selectOriginals","useMemo","useSources","preview","ScrollToTopButton","useLocation","NavigateBackButton","ScrollUpButton","scrollUp","window","scrollTo","to","SEARCH","Div","StyledSurface","Surface","bodyWidth","StyledImage","LayoutOutOfItems","virtualRef","role","OutOfItems","aliases","selectAliasesAsList","aliasesForRendering","reduce","result","alias","types","toggleTag","useToggleTag","outOfResultsPicture","TagList","tags","onTagClick","onTagMenu","detailed"],"mappings":"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","file":"static/js/0.0b5d308c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// List of handlers paired with the target element for identification\r\nlet handlers: Array<{ element: Element; update: (isOnScreen: boolean) => void }> = []\r\n\r\n// global handler that can handle multiple entires at the same time\r\nconst handleOnScreenChange = (entries: IntersectionObserverEntry[]) => {\r\n  entries.forEach((entry) => {\r\n    const handler = handlers.find((h) => h.element === entry.target)\r\n\r\n    if (handler) {\r\n      handler.update(entry.isIntersecting)\r\n    }\r\n  })\r\n}\r\n\r\n// single observer\r\nconst observer = new IntersectionObserver(handleOnScreenChange, { threshold: 1 })\r\n\r\n/**\r\n * Provides a boolean value indicating whether the {@link target} is fully visible on screen\r\n */\r\nexport default function useIsOnScreen(target: Element | null) {\r\n  const [isOnScreen, setOnScreen] = React.useState(false)\r\n\r\n  const onIsOnScreenChange = React.useCallback((value: boolean) => {\r\n    setOnScreen(value)\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (target) {\r\n      const handler = { element: target, update: onIsOnScreenChange }\r\n      handlers.push(handler)\r\n      observer.observe(target)\r\n\r\n      return () => {\r\n        handlers.filter((h) => h !== handler)\r\n        observer.unobserve(target)\r\n      }\r\n    }\r\n  }, [onIsOnScreenChange, target])\r\n\r\n  return [isOnScreen]\r\n}\r\n","import { keyframes } from 'styled-components'\n\nexport const fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`\n","import styled, { DefaultTheme, css } from 'styled-components'\r\n\r\nfunction thumbStyle({ $controls, theme }: { $controls: boolean; theme: DefaultTheme }) {\r\n  const commonStyle = css`\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 100px;\r\n    background: ${$controls ? theme.colors.backgroundColor2 : 'transparent'};\r\n    cursor: pointer;\r\n  `\r\n\r\n  return css`\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-moz-range-thumb {\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-ms-thumb {\r\n      ${commonStyle}\r\n    }\r\n  `\r\n}\r\n\r\nfunction trackStyle({ $accent, theme }: { $accent: boolean; theme: DefaultTheme }) {\r\n  return css`\r\n    -webkit-appearance: none;\r\n    flex-grow: 1;\r\n    background: ${(props) => props.theme.colors.layerBg};\r\n    border-radius: 100px;\r\n    height: 6px;\r\n\r\n    &::-moz-range-progress {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n\r\n    &::-ms-fill-lower {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n  `\r\n}\r\n\r\nexport const Slider = styled.input(\r\n  ({ $controls, $accent, theme }: { $controls: boolean; $accent: boolean; theme: DefaultTheme }) => css`\r\n    ${trackStyle({ $accent, theme })}\r\n    ${thumbStyle({ $controls, theme })}\r\n  `\r\n)\r\n","import React, { MouseEventHandler } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface PlayPauseIconProps {\r\n  className?: string\r\n  isPaused: boolean\r\n  onClick: MouseEventHandler<SVGElement>\r\n}\r\n\r\nconst MorphSvg = styled.svg`\r\n  > rect {\r\n    transition: all 0.2s ease-in;\r\n  }\r\n\r\n  &.play {\r\n    .left {\r\n      clip-path: path('M1.61 0 L10.1 4.9 L10.1 19.1 L1.61 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M22.39 12 L9.9 4.79 L9.9 19.21 L22.39 12');\r\n    }\r\n  }\r\n\r\n  &.pause {\r\n    .left {\r\n      clip-path: path('M4.8 0 L10 0 L10 24 L4.8 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M19.2 0 L14 0 L14 24 L19.2 24');\r\n    }\r\n  }\r\n`\r\n\r\n/**\r\n * A button that fluidly transforms between a Play and a Pause icon based on isPaused.\r\n * Use onClick to update isPaused.\r\n * Additionally, this component takes a classname\r\n */\r\nexport function PlayPauseIcon(props: PlayPauseIconProps) {\r\n  const { onClick, className = '', isPaused } = props\r\n\r\n  return (\r\n    <MorphSvg\r\n      name='Play/Pause'\r\n      viewBox='0 0 24 24'\r\n      xmlns='http://www.w3.org/2000/svg'\r\n      onClick={onClick}\r\n      className={`${className} ${isPaused ? 'play' : 'pause'}`}\r\n    >\r\n      <rect className='left' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n      <rect className='right' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n    </MorphSvg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { RouteName } from '../../data/types'\r\nimport { ExpandIcon, CloseIcon } from '../../icons/FontAwesomeIcons'\r\nimport { scrollToPost, setFullscreenPost } from '../../redux/actions'\r\nimport { dropShadow } from '../../styled/mixins/shadow'\r\nimport { InvisButton } from '../designsystem/Buttons'\r\n\r\nconst ToggleButton = styled(InvisButton)(\r\n  ({ theme }) => css`\r\n    grid-area: 1/1/2/2;\r\n    place-self: start start;\r\n    ${dropShadow}\r\n    padding: ${theme.dimensions.bigSpacing};\r\n    cursor: pointer;\r\n  `\r\n)\r\n\r\ninterface ToggleFullscreenButtonProps {\r\n  index: number\r\n}\r\n\r\nexport default function ToggleFullscreenButton(props: ToggleFullscreenButtonProps) {\r\n  const { index } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onFullscreenExit = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      history.goBack()\r\n      dispatch(scrollToPost(index))\r\n    },\r\n    [dispatch, history, index]\r\n  )\r\n\r\n  const onFullscreenEnter = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      dispatch(setFullscreenPost(index))\r\n      history.push(RouteName.STORIES)\r\n    },\r\n    [dispatch, history, index]\r\n  )\r\n\r\n  return history.location.pathname === RouteName.STORIES ? (\r\n    <ToggleButton onClick={onFullscreenExit} aria-label='Exit fullscreen' title='Exit fullscreen'>\r\n      <CloseIcon color='white' />\r\n    </ToggleButton>\r\n  ) : (\r\n    <ToggleButton onClick={onFullscreenEnter} aria-label='Enter fullscreen' title='Enter fullscreen'>\r\n      <ExpandIcon color='white' />\r\n    </ToggleButton>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { download } from '../../data/utils'\r\nimport { DownloadIcon, ExternalLinkIcon } from '../../icons/FontAwesomeIcons'\r\nimport { flexRowWithGap } from '../../styled/mixins/layout'\r\nimport { dropShadow } from '../../styled/mixins/shadow'\r\nimport { InvisButton } from '../designsystem/Buttons'\r\n\r\nconst Wrapper = styled.div`\r\n  grid-area: 3/1/4/2;\r\n  ${flexRowWithGap}\r\n  place-self: end start;\r\n  place-items: start center;\r\n`\r\n\r\nconst LinkButton = styled.a(\r\n  ({ theme }) => css`\r\n    padding: ${theme.dimensions.bigSpacing};\r\n    cursor: pointer;\r\n    ${dropShadow({ theme })}\r\n\r\n    svg {\r\n      transition: all ${theme.timings.transitionTime} ease-out;\r\n    }\r\n  `\r\n)\r\n\r\nconst DownloadButton = styled(InvisButton)`\r\n  cursor: pointer;\r\n`\r\n\r\ninterface LinkListProps {\r\n  fullSrc: string\r\n}\r\n\r\nexport default function LinkList(props: LinkListProps) {\r\n  const { fullSrc } = props\r\n\r\n  const handleDownload = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      download(fullSrc)\r\n    },\r\n    [fullSrc]\r\n  )\r\n\r\n  return (\r\n    <Wrapper>\r\n      <LinkButton href={fullSrc} target='_blank' rel='noopener noreferrer' aria-label='Open In New Tab' title={fullSrc}>\r\n        <ExternalLinkIcon color='white' title='Open image in new tab' />\r\n      </LinkButton>\r\n\r\n      <DownloadButton aria-label='Download Image' onClick={handleDownload} title={fullSrc}>\r\n        <DownloadIcon color='white' />\r\n      </DownloadButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import styled, { css } from 'styled-components'\r\nimport { fadeOut } from '../../styled/animations'\r\nimport { formatDuration } from '../../misc/formatting'\r\nimport { ProgressBar } from './ProgressBar'\r\nimport { PlayPauseIcon } from '../../icons/PlayPauseIcon'\r\nimport ToggleFullscreenButton from './ToggleFullscreenButton'\r\nimport LinkList from './LinkList'\r\nimport React, { useCallback } from 'react'\r\nimport FullscreenProgressBar from './FullscreenProgressBar'\r\nimport { BackwardIcon, ForwardIcon } from '../../icons/FontAwesomeIcons'\r\nimport { dropShadow } from '../../styled/mixins/shadow'\r\n\r\nfunction overlayVisibility({ isVisible }: { isVisible: boolean }) {\r\n  return isVisible\r\n    ? css``\r\n    : css`\r\n        opacity: 0;\r\n        animation: ${fadeOut} 0.4s ease-in;\r\n      `\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: auto 1fr auto auto;\r\n\r\n  ${overlayVisibility};\r\n`\r\n\r\nconst VideoProgressBar = styled(ProgressBar)(\r\n  ({ theme }) => css`\r\n    grid-area: 4/1/4/4;\r\n    margin: ${theme.dimensions.bigSpacing};\r\n  `\r\n)\r\n\r\nconst AutoProgressBar = styled(FullscreenProgressBar)(\r\n  ({ theme }) => css`\r\n    grid-area: 4/1/4/4;\r\n    margin: ${theme.dimensions.bigSpacing};\r\n  `\r\n)\r\n\r\nconst PlayButton = styled(PlayPauseIcon)`\r\n  height: 50px;\r\n  width: 50px;\r\n  grid-area: 2/2/3/3;\r\n  place-self: center center;\r\n  cursor: pointer;\r\n  fill: white;\r\n  ${dropShadow}\r\n`\r\n\r\nconst LengthDisplay = styled.span(\r\n  (props) => css`\r\n    grid-area: 3/3/4/4;\r\n    place-self: end end;\r\n    background: #00000080;\r\n    color: white;\r\n    border-radius: 4px;\r\n    padding: ${props.theme.dimensions.spacing};\r\n    margin: ${props.theme.dimensions.bigSpacing};\r\n  `\r\n)\r\n\r\nconst ForwardArea = styled.div`\r\n  display: grid;\r\n  grid-area: 2/3/3/4;\r\n  place-items: center;\r\n  opacity: 0;\r\n`\r\n\r\nconst BackwardArea = styled.div`\r\n  display: grid;\r\n  grid-area: 2/1/3/2;\r\n  place-items: center;\r\n  opacity: 0;\r\n`\r\n\r\ntype ImageOverlayProps = {\r\n  type: 'image'\r\n  index: number\r\n  fullSrc: string\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\ntype GifOverlayProps = {\r\n  type: 'gif'\r\n  index: number\r\n  fullSrc: string\r\n  isPaused: boolean\r\n  onTogglePaused: React.MouseEventHandler\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\ntype VideoOverlayProps = {\r\n  type: 'video'\r\n  index: number\r\n  fullSrc: string\r\n  isPaused: boolean\r\n  duration: number\r\n  onTogglePaused: React.MouseEventHandler\r\n  onSeek: (value: number) => void\r\n  videoRef: HTMLVideoElement | null\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\ntype OverlayProps = (ImageOverlayProps | VideoOverlayProps | GifOverlayProps) & {\r\n  isVisible: boolean\r\n  setVisible: (value: boolean) => void\r\n}\r\n\r\nexport function ImageOverlay(props: Omit<ImageOverlayProps, 'type'>) {\r\n  const { index, fullSrc, isFullscreen, isActive, onFinished } = props\r\n\r\n  return (\r\n    <>\r\n      <ToggleFullscreenButton index={index} />\r\n      <LinkList fullSrc={fullSrc} />\r\n      {isFullscreen && <AutoProgressBar index={index} onFinished={onFinished} isActive={isActive} />}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction GifOverlay(props: Omit<GifOverlayProps, 'type'>) {\r\n  const { fullSrc, isPaused, index, onTogglePaused, isFullscreen, isActive, onFinished } = props\r\n\r\n  return (\r\n    <>\r\n      <ToggleFullscreenButton index={index} />\r\n      <LinkList fullSrc={fullSrc} />\r\n      <PlayButton isPaused={isPaused} onClick={onTogglePaused} aria-label='Play/Pause' />\r\n      {isFullscreen && (\r\n        <AutoProgressBar index={index} isPaused={isPaused} onFinished={onFinished} isActive={isActive} />\r\n      )}\r\n      <LengthDisplay>GIF</LengthDisplay>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction VideoOverlay(props: Omit<VideoOverlayProps, 'type'>) {\r\n  const { fullSrc, isPaused, index, onTogglePaused, onSeek, duration, videoRef, isActive, onFinished } = props\r\n\r\n  const handleSkipForward = useCallback(\r\n    (e) => {\r\n      e.preventDefault()\r\n      if (videoRef) {\r\n        onSeek(videoRef.currentTime + 10)\r\n      }\r\n    },\r\n    [onSeek, videoRef]\r\n  )\r\n\r\n  const handleSkipBackward = useCallback(\r\n    (e) => {\r\n      e.preventDefault()\r\n      if (videoRef) {\r\n        onSeek(videoRef.currentTime - 10)\r\n      }\r\n    },\r\n    [onSeek, videoRef]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <ToggleFullscreenButton index={index} />\r\n      <LinkList fullSrc={fullSrc} />\r\n      <BackwardArea onDoubleClick={handleSkipBackward}>\r\n        <BackwardIcon tabIndex={0} />\r\n      </BackwardArea>\r\n      <PlayButton isPaused={isPaused || !isActive} onClick={onTogglePaused} aria-label='Play/Pause' />\r\n      <ForwardArea onDoubleClick={handleSkipForward}>\r\n        <ForwardIcon tabIndex={0} />\r\n      </ForwardArea>\r\n      <LengthDisplay>{formatDuration(duration)}</LengthDisplay>\r\n      <VideoProgressBar isPaused={isPaused || !isActive} videoRef={videoRef} onChange={onSeek} onEnded={onFinished} />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction getOverlayContent(props: OverlayProps) {\r\n  switch (props.type) {\r\n    case 'image':\r\n      return <ImageOverlay {...props} />\r\n    case 'gif':\r\n      return <GifOverlay {...props} />\r\n    case 'video':\r\n      return <VideoOverlay {...props} />\r\n  }\r\n}\r\n\r\nexport function Overlay(props: OverlayProps) {\r\n  const { isVisible, setVisible } = props\r\n\r\n  const toggleVisible = React.useCallback(() => setVisible(!isVisible), [isVisible, setVisible])\r\n\r\n  return (\r\n    <Wrapper\r\n      isVisible={isVisible}\r\n      onClick={toggleVisible}\r\n      data-testid='overlay-wrapper'\r\n      data-name='overlay'\r\n      className='overlay'\r\n    >\r\n      {getOverlayContent(props)}\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React, { ChangeEventHandler, MouseEventHandler, useCallback } from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface ProgressBarProps {\r\n  isPaused: boolean\r\n  videoRef: HTMLVideoElement | null\r\n  onChange: (newValue: number) => void\r\n  className?: string\r\n  onEnded?: () => void\r\n}\r\n\r\nexport const ProgressBar = (props: ProgressBarProps) => {\r\n  const { isPaused, videoRef, className, onChange, onEnded } = props\r\n\r\n  const sliderRef = React.useRef<HTMLInputElement>(null)\r\n\r\n  const theme = useTheme()\r\n\r\n  const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\r\n    (event) => {\r\n      const newValue = Number(event.target.value)\r\n      onChange(newValue)\r\n    },\r\n    [onChange]\r\n  )\r\n\r\n  const handleClick: MouseEventHandler = useCallback((event) => {\r\n    event.stopPropagation()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (onEnded && videoRef) {\r\n      videoRef.addEventListener('ended', onEnded)\r\n\r\n      return () => videoRef.removeEventListener('ended', onEnded)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!isPaused) {\r\n      let handle: number\r\n\r\n      const step = () => {\r\n        if (sliderRef?.current && videoRef) {\r\n          sliderRef.current.value = videoRef.currentTime.toString()\r\n          const chromePercentage = (videoRef.currentTime / videoRef.duration) * 100\r\n          sliderRef.current.style.backgroundImage = `linear-gradient(90deg, ${theme.colors.accentColor} ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n        }\r\n\r\n        handle = requestAnimationFrame(step)\r\n      }\r\n\r\n      handle = requestAnimationFrame(step)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [isPaused, theme.colors.accentColor, theme.colors.backgroundColor2, videoRef])\r\n\r\n  return (\r\n    <Slider\r\n      ref={sliderRef}\r\n      type='range'\r\n      step={1}\r\n      min={0}\r\n      max={videoRef?.duration || 0}\r\n      onChange={handleChange}\r\n      className={className}\r\n      onClick={handleClick}\r\n      $controls\r\n      $accent\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NO_OP } from '../../data/types'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { selectAutoscrollDelay } from '../../redux/selectors'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface FullscreenProgressBarProps {\r\n  className?: string\r\n  index: number\r\n  isPaused?: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function FullscreenProgressBar(props: FullscreenProgressBarProps) {\r\n  const { onFinished = NO_OP, isActive } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const [mouseState, setMouseState] = React.useState(false)\r\n  const setPost = React.useCallback((newIndex) => dispatch(setFullscreenPost(newIndex)), [dispatch])\r\n  const duration = 1000 * useSelector(selectAutoscrollDelay)\r\n  const ref = React.useRef<HTMLInputElement>(null)\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(true)\r\n    document.addEventListener('mousedown', listener)\r\n    document.addEventListener('touchstart', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener)\r\n      document.removeEventListener('touchstart', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(false)\r\n    document.addEventListener('mouseup', listener)\r\n    document.addEventListener('touchend', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mouseup', listener)\r\n      document.removeEventListener('touchend', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!mouseState && isActive) {\r\n      let handle: number\r\n      let then = new Date().getTime()\r\n\r\n      const renderFrame = () => {\r\n        if (ref.current) {\r\n          const now = new Date().getTime()\r\n          const newValue = Number(ref.current.value) + (now - then)\r\n          then = now\r\n\r\n          ref.current.value = newValue.toString()\r\n          const chromePercentage = (newValue / duration) * 100\r\n          ref.current.style.backgroundImage = `linear-gradient(90deg, #ffffff80 ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n\r\n          if (newValue >= Number(ref.current.max)) {\r\n            onFinished()\r\n            if (ref.current) {\r\n              ref.current.value = '0'\r\n            }\r\n          } else {\r\n            handle = requestAnimationFrame(renderFrame)\r\n          }\r\n        }\r\n      }\r\n\r\n      handle = requestAnimationFrame(renderFrame)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [duration, isActive, mouseState, onFinished, props.index, setPost])\r\n\r\n  return (\r\n    <Slider\r\n      ref={ref}\r\n      type='range'\r\n      step={1}\r\n      min={0}\r\n      max={duration}\r\n      onChange={NO_OP}\r\n      onClick={NO_OP}\r\n      $controls={false}\r\n      $accent={false}\r\n      className={props.className}\r\n    />\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { flexMedia, preserveAspectRatio } from '../../styled/mixins/media'\r\n\r\nconst FlexVideo = styled.video`\r\n  ${flexMedia}\r\n  ${preserveAspectRatio}\r\n  grid-area: 1/1/2/2;\r\n`\r\n\r\nexport default FlexVideo\r\n","import styled from 'styled-components'\r\nimport { mediaStyle } from '../../../styled/mixins/media'\r\nimport FlexImage from '../../designsystem/FlexImage'\r\nimport FlexVideo from '../../designsystem/FlexVideo'\r\n\r\nexport const PostVideo = styled(FlexVideo)`\r\n  ${mediaStyle}\r\n`\r\n\r\nexport const PostImage = styled(FlexImage)`\r\n  ${mediaStyle}\r\n`\r\n","import React from 'react'\r\nimport { NO_OP } from '../../../data/types'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostImage } from './StyledMedia'\r\n\r\ninterface PictureProps {\r\n  viewSrc: string\r\n  fullSrc: string\r\n  onLoad?: () => void\r\n  width: number\r\n  height: number\r\n  index: number\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function Picture(props: PictureProps) {\r\n  const { viewSrc, fullSrc, index, onLoad = NO_OP, width, height, isFullscreen, isActive, onFinished } = props\r\n\r\n  return (\r\n    <>\r\n      <PostImage\r\n        data-testid='image'\r\n        src={viewSrc}\r\n        alt={viewSrc}\r\n        onLoad={onLoad}\r\n        loading='lazy'\r\n        width={width}\r\n        height={height}\r\n      />\r\n      <Overlay\r\n        type='image'\r\n        fullSrc={fullSrc}\r\n        index={index}\r\n        isVisible={true}\r\n        setVisible={NO_OP}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nlet isScrollingGlobal = false\r\nlet observers: React.Dispatch<React.SetStateAction<boolean>>[] = []\r\nlet listener: ((e: any) => void) | undefined\r\nlet timeoutId: NodeJS.Timeout | undefined\r\n\r\nexport const useIsScrolling = () => {\r\n  const [isScrolling, setIsScrolling] = React.useState(isScrollingGlobal)\r\n\r\n  if (listener === undefined) {\r\n    listener = (e) => {\r\n      isScrollingGlobal = true\r\n      observers.forEach((update) => update(isScrollingGlobal))\r\n\r\n      if (timeoutId) clearTimeout(timeoutId)\r\n\r\n      timeoutId = setTimeout(() => {\r\n        isScrollingGlobal = false\r\n        observers.forEach((update) => update(isScrollingGlobal))\r\n      }, 500)\r\n    }\r\n    document.addEventListener('scroll', listener, { passive: true })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    observers.push(setIsScrolling)\r\n    setIsScrolling(isScrollingGlobal)\r\n    return () => {\r\n      observers = observers.filter((update) => update !== setIsScrolling)\r\n\r\n      if (observers.length === 0 && listener) {\r\n        document.removeEventListener('scroll', listener)\r\n        listener = undefined\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // return global isOnline state and setter function\r\n  return isScrolling\r\n}\r\n","import React from 'react'\r\nimport useIsOnScreen from './useIsOnScreen'\r\nimport { useIsScrolling } from './useIsScrolling'\r\n\r\nexport function useAutoplay(ref: Element | null) {\r\n  const [shouldPlay, setShouldPlay] = React.useState(false)\r\n\r\n  const [isOnScreen] = useIsOnScreen(ref)\r\n  const isScrolling = useIsScrolling()\r\n\r\n  React.useEffect(() => {\r\n    if (isOnScreen && !isScrolling) {\r\n      setShouldPlay(true)\r\n    }\r\n  }, [isOnScreen, isScrolling])\r\n\r\n  React.useEffect(() => {\r\n    if (!isOnScreen) {\r\n      setShouldPlay(false)\r\n    }\r\n  }, [isOnScreen])\r\n\r\n  return shouldPlay\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { NO_OP } from '../../../data/types'\r\nimport MediaProps from './MediaProps'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostImage } from './StyledMedia'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAutoPlay, selectPreloadGifs } from '../../../redux/selectors'\r\nimport { useAutoplay } from '../../../hooks/useAutoplay'\r\n\r\nexport default function Gif(props: MediaProps) {\r\n  const {\r\n    viewSrc,\r\n    thumbnailSrc,\r\n    fullSrc,\r\n    onLoad = NO_OP,\r\n    index,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen,\r\n    onFinished,\r\n    isActive,\r\n  } = props\r\n\r\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\r\n\r\n  // user play\r\n  const [playState, setPlayState] = useState(false)\r\n\r\n  // auto play\r\n  const [gifRef, setGifRef] = useState<HTMLImageElement | null>(null)\r\n  const prefAutoplay = useSelector(selectAutoPlay)\r\n  const autoPlay = useAutoplay(gifRef)\r\n  // Preloading\r\n  const preload = useSelector(selectPreloadGifs)\r\n\r\n  const usedSource = playState ? viewSrc : thumbnailSrc\r\n\r\n  const play = React.useCallback(async () => {\r\n    setPlayState(true)\r\n  }, [])\r\n\r\n  const pause = React.useCallback(() => {\r\n    setPlayState(false)\r\n  }, [])\r\n\r\n  const togglePlay: React.MouseEventHandler = React.useCallback(\r\n    (e) => {\r\n      e.stopPropagation()\r\n      if (playState) {\r\n        setPlayState(false)\r\n      } else {\r\n        setPlayState(true)\r\n        setOverlayVisible(false)\r\n      }\r\n    },\r\n    [playState]\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    if (prefAutoplay || isFullscreen) {\r\n      if (autoPlay) {\r\n        setPlayState(true)\r\n        setOverlayVisible(false)\r\n      }\r\n    }\r\n\r\n    if (!autoPlay) {\r\n      setPlayState(false)\r\n    }\r\n  }, [autoPlay, isFullscreen, pause, play, prefAutoplay])\r\n\r\n  useEffect(() => {\r\n    if (preload) {\r\n      const loader = new Image()\r\n      loader.src = viewSrc\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <PostImage\r\n        data-testid='gif'\r\n        ref={setGifRef}\r\n        src={usedSource}\r\n        alt={usedSource}\r\n        loading='lazy'\r\n        onLoad={onLoad}\r\n        width={width}\r\n        height={height}\r\n      />\r\n\r\n      <Overlay\r\n        isVisible={!playState || overlayVisible || detailsVisible}\r\n        setVisible={setOverlayVisible}\r\n        type='gif'\r\n        fullSrc={fullSrc}\r\n        index={index}\r\n        isPaused={!playState}\r\n        onTogglePaused={togglePlay}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { NO_OP } from '../../../data/types'\r\nimport { selectAutoPlay, selectPreloadVideos } from '../../../redux/selectors'\r\nimport MediaProps from './MediaProps'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostVideo } from './StyledMedia'\r\nimport { useAutoplay } from '../../../hooks/useAutoplay'\r\n\r\nexport default function Video(props: MediaProps) {\r\n  const {\r\n    viewSrc,\r\n    fullSrc,\r\n    onLoad = NO_OP,\r\n    index,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen,\r\n    isActive,\r\n    onFinished,\r\n  } = props\r\n\r\n  const [playState, setPlayState] = useState(false)\r\n\r\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\r\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)\r\n\r\n  const autoPlay = useAutoplay(videoRef)\r\n\r\n  const preload = useSelector(selectPreloadVideos) ? 'auto' : 'metadata'\r\n  const prefAutoplay = useSelector(selectAutoPlay)\r\n\r\n  const play = React.useCallback(async () => {\r\n    if (videoRef?.paused) {\r\n      try {\r\n        await videoRef.play()\r\n        setPlayState(true)\r\n      } catch (err) {\r\n        if ((err as DOMException).message.includes(\"user didn't interact with the document first\")) {\r\n          // Modern browsers prevent playing of videos before the use has interacted with the page in some form\r\n          console.warn('Autoplay failed because the user did not interact with the page first:', err)\r\n        } else if ((err as DOMException).message.includes('play() request was interrupted by a call to pause()')) {\r\n          // This happens when you scrollfast with autoplay enabled.\r\n          // The videos attempt to play but before they actually start you already scroll on\r\n          // and they get paused as they move offscreen.\r\n          console.warn('Play was interrupted by pause', err)\r\n        } else {\r\n          console.error('Failed to start video:', err)\r\n        }\r\n      }\r\n    }\r\n  }, [videoRef])\r\n\r\n  const pause = React.useCallback(() => {\r\n    if (!videoRef?.paused) {\r\n      try {\r\n        videoRef?.pause()\r\n        setPlayState(false)\r\n      } catch (err) {\r\n        console.error('Failed to start video:', err)\r\n      }\r\n    }\r\n  }, [videoRef])\r\n\r\n  const handleSeek = React.useCallback(\r\n    (value: number) => {\r\n      if (videoRef) {\r\n        videoRef.currentTime = value\r\n      }\r\n    },\r\n    [videoRef]\r\n  )\r\n\r\n  // user play\r\n  const togglePlay: React.MouseEventHandler = React.useCallback(\r\n    (e) => {\r\n      e.stopPropagation()\r\n      if (videoRef) {\r\n        if (videoRef.paused) {\r\n          play()\r\n          setOverlayVisible(false)\r\n        } else {\r\n          pause()\r\n        }\r\n      }\r\n    },\r\n    [pause, play, videoRef]\r\n  )\r\n\r\n  // automatic play/pause\r\n  React.useEffect(() => {\r\n    // in fullscreen mode autoplay is on by default\r\n    if (prefAutoplay || isFullscreen) {\r\n      if (autoPlay) {\r\n        play()\r\n        setOverlayVisible(false)\r\n      }\r\n    }\r\n\r\n    if (!autoPlay) {\r\n      pause()\r\n    }\r\n  }, [autoPlay, isFullscreen, pause, play, prefAutoplay])\r\n\r\n  return (\r\n    <>\r\n      <PostVideo\r\n        data-testid='video'\r\n        controls={false}\r\n        loop={!isFullscreen}\r\n        preload={preload}\r\n        ref={setVideoRef}\r\n        onLoadedMetadata={onLoad}\r\n        width={width}\r\n        height={height}\r\n        src={viewSrc}\r\n      />\r\n      <Overlay\r\n        type='video'\r\n        index={index}\r\n        fullSrc={fullSrc}\r\n        isPaused={!playState}\r\n        duration={videoRef?.duration || 0}\r\n        onTogglePaused={togglePlay}\r\n        onSeek={handleSeek}\r\n        videoRef={videoRef}\r\n        isVisible={playState === false || detailsVisible || overlayVisible}\r\n        setVisible={setOverlayVisible}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import * as r34 from 'r34-types'\r\nimport React from 'react'\r\nimport Picture from './media/Picture'\r\nimport Gif from './media/Gif'\r\nimport Video from './media/Video'\r\nimport { useSources } from '../../hooks/useSources'\r\n\r\ntype MediaProps = {\r\n  type: r34.PostType\r\n  index: number\r\n  thumbnailSrc: string\r\n  sampleSrc: string\r\n  fullSrc: string\r\n  onLoad: () => void\r\n  width: number\r\n  height: number\r\n  detailsVisible: boolean\r\n  isFullscreen?: boolean\r\n  onFinished?: () => void\r\n  isActive?: boolean\r\n}\r\n\r\nexport function Media(props: MediaProps) {\r\n  const {\r\n    type,\r\n    thumbnailSrc,\r\n    sampleSrc,\r\n    fullSrc,\r\n    index,\r\n    onLoad,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen = false,\r\n    onFinished,\r\n    isActive = false,\r\n  } = props\r\n  const [preview, src] = useSources(type, thumbnailSrc, sampleSrc, fullSrc)\r\n\r\n  switch (type) {\r\n    case 'image':\r\n      return (\r\n        <Picture\r\n          viewSrc={src}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'gif':\r\n      return (\r\n        <Gif\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'video':\r\n      return (\r\n        <Video\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectOriginals } from '../redux/selectors'\r\nimport * as r34 from 'r34-types'\r\n\r\nexport function useSources(type: r34.PostType, thumbnailSrc: string, sampleSrc: string, fullSrc: string) {\r\n  const loadOriginals = useSelector(selectOriginals)\r\n\r\n  return React.useMemo(() => {\r\n    switch (type) {\r\n      case 'image':\r\n        return loadOriginals ? ['', fullSrc] : ['', sampleSrc]\r\n      case 'gif':\r\n        return sampleSrc.includes('.gif') ? [thumbnailSrc, sampleSrc] : [sampleSrc, fullSrc]\r\n      case 'video':\r\n        return loadOriginals ? [thumbnailSrc, fullSrc] : [thumbnailSrc, sampleSrc]\r\n    }\r\n  }, [fullSrc, loadOriginals, sampleSrc, thumbnailSrc, type])\r\n}\r\n","import React from 'react'\r\nimport { useLocation } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\nimport { RouteName } from '../../data/types'\r\n\r\nimport { ArrowUp } from '../../icons/FontAwesomeIcons'\r\nimport { BlockButton } from '../designsystem/Buttons'\r\n\r\nexport default function ScrollToTopButton() {\r\n  const location = useLocation()\r\n\r\n  if (location.pathname === RouteName.STORIES) {\r\n    return <NavigateBackButton />\r\n  } else {\r\n    return <ScrollUpButton />\r\n  }\r\n}\r\n\r\nfunction ScrollUpButton() {\r\n  const scrollUp = React.useCallback(() => window.scrollTo(0, 0), [])\r\n\r\n  return (\r\n    <BlockButton onClick={scrollUp}>\r\n      <ArrowUp /> Take me to the top\r\n    </BlockButton>\r\n  )\r\n}\r\n\r\nfunction NavigateBackButton() {\r\n  return (\r\n    <Link to={RouteName.SEARCH}>\r\n      <BlockButton>\r\n        <ArrowUp /> Take me to the top\r\n      </BlockButton>\r\n    </Link>\r\n  )\r\n}\r\n","import * as r34 from 'r34-types'\r\nimport React, { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport styled, { css } from 'styled-components'\r\nimport { NO_OP } from '../../data/types'\r\nimport useToggleTag from '../../hooks/useToggleTag'\r\nimport outOfResultsPicture from '../../icons/OutOfResults.png'\r\nimport { selectAliasesAsList } from '../../redux/selectors'\r\nimport FlexImage from '../designsystem/FlexImage'\r\nimport { HorizontalLine } from '../designsystem/Lines'\r\nimport { Surface } from '../designsystem/Surface'\r\nimport { SmallTitle } from '../designsystem/Text'\r\nimport TagList from '../tag/TagList'\r\nimport ScrollToTopButton from '../widgets/ScrollToTopButton'\r\nimport LayoutElementProps from './LayoutElementProps'\r\n\r\nconst Div = styled.div(\r\n  ({ theme }) => css`\r\n    padding: ${theme.dimensions.bigSpacing};\r\n  `\r\n)\r\n\r\nconst StyledSurface = styled(Surface)(\r\n  ({ theme }) => css`\r\n    max-width: ${theme.dimensions.bodyWidth};\r\n    margin: auto;\r\n    text-align: center;\r\n  `\r\n)\r\n\r\nconst StyledImage = styled(FlexImage)`\r\n  max-height: 50vh;\r\n`\r\n\r\nexport default function LayoutOutOfItems({ onLoad = NO_OP, virtualRef, style }: LayoutElementProps) {\r\n  return (\r\n    <Div style={style} ref={virtualRef} onLoad={onLoad} role='row'>\r\n      <OutOfItems />\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport function OutOfItems() {\r\n  const aliases = useSelector(selectAliasesAsList)\r\n  const aliasesForRendering = useMemo(\r\n    () =>\r\n      aliases.reduce((result, alias) => {\r\n        result[alias.name] = { ...alias, types: [] }\r\n        return result\r\n      }, {} as Record<string, r34.Tag>),\r\n    [aliases]\r\n  )\r\n  const toggleTag = useToggleTag()\r\n\r\n  return (\r\n    <StyledSurface>\r\n      <StyledImage src={outOfResultsPicture} alt='Shironeko does not understand' />\r\n      <HorizontalLine />\r\n      <SmallTitle>You have reached the end!</SmallTitle>\r\n      <p>Go look for something else!</p>\r\n      {aliases.length > 0 && (\r\n        <>\r\n          <p>How about some of these?</p>\r\n          <TagList tags={aliasesForRendering} onTagClick={toggleTag} onTagMenu={NO_OP} detailed />\r\n        </>\r\n      )}\r\n      <ScrollToTopButton />\r\n    </StyledSurface>\r\n  )\r\n}\r\n"],"sourceRoot":""}