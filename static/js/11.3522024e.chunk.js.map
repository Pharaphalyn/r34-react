{"version":3,"sources":["components/layout/stories/Story.tsx","components/pages/Stories.tsx"],"names":["Screen","styled","div","ZIndex","POST","OVERLAY","Story","props","index","onInView","onFinished","active","React","useState","ref","setRef","useIsOnScreen","isInView","useSelector","selectPostByIndex","type","preview_url","sample_url","file_url","width","height","useEffect","scrollIntoView","id","Media","thumbnailSrc","sampleSrc","fullSrc","onLoad","NO_OP","detailsVisible","isFullscreen","isActive","StoriesWrapper","Filler","css","Math","max","Stories","dispatch","useDispatch","history","useHistory","currentIdx","selectFullsceenIndex","postCount","selectCount","nextIdx","indexes","setIndex","useCallback","setFullscreenPost","scrollToNext","document","getElementById","behavior","handler","fullscreenElement","goBack","addEventListener","passive","removeEventListener","openFullscreen","map"],"mappings":"ySAQMA,EAASC,IAAOC,IAAV,mYAcGC,IAAOC,KAIPD,IAAOE,SAiBP,SAASC,EAAMC,GAC5B,IAAQC,EAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,SAAUC,EAA+BH,EAA/BG,WAAzB,EAAwDH,EAAnBI,cAArC,SACA,EAAsBC,IAAMC,SAA6B,MAAzD,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAmBC,YAAcF,GAA1BG,EAAP,oBACA,EAAmEC,YAAYC,YAAkBX,IAAzFY,EAAR,EAAQA,KAAMC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,WAAYC,EAAvC,EAAuCA,SAAUC,EAAjD,EAAiDA,MAAOC,EAAxD,EAAwDA,OAcxD,OAZAb,IAAMc,WAAU,WACVf,GAAUG,GACZA,EAAIa,mBAEL,CAAChB,EAAQG,IAEZF,IAAMc,WAAU,WACVjB,GAAYQ,GACdR,EAASD,KAEV,CAACA,EAAOS,EAAUR,IAGnB,cAACT,EAAD,CAAQ4B,GAAE,gBAAWpB,GAASM,IAAKC,EAAnC,SACE,cAACc,EAAA,EAAD,CACET,KAAMA,EACNZ,MAAOA,EACPsB,aAAcT,EACdU,UAAWT,EACXU,QAAST,EACTU,OAAQC,IACRV,MAAOA,EACPC,OAAQA,EACRU,gBAAgB,EAChBC,cAAc,EACd1B,WAAYA,EACZ2B,SAAUpB,MCjElB,IAAMqB,EAAiBrC,IAAOC,IAAV,sNAiBdqC,EAAStC,IAAOC,KACpB,gBAAGM,EAAH,EAAGA,MAAH,OAA4BgC,YAA3B,IAAD,+CACYC,KAAKC,IAAIlC,EAAQ,EAAG,OAI5BR,EAASC,IAAOC,IAAV,wUAoBG,SAASyC,IACtB,IAAMC,EAAWC,cACXC,EAAUC,cAEhB,EAAsBnC,IAAMC,SAA6B,MAAzD,mBAAOC,EAAP,KAAYC,EAAZ,KAEMiC,EAAa9B,YAAY+B,KACzBC,EAAYhC,YAAYiC,KACxBC,EAAUJ,EAAa,EAGvBK,EAAU,CAFAL,EAAa,EAEHA,EAAYI,GAEhCE,EAAW1C,IAAM2C,aAAY,SAAC/C,GAAD,OAAmBoC,EAASY,YAAkBhD,MAAS,CAACoC,IAErFa,EAAe7C,IAAM2C,aAAY,WAAO,IAAD,EAC3C,UAAAG,SAASC,eAAT,gBAAiCP,WAAjC,SAA6CzB,eAAe,CAAEiC,SAAU,aACvE,CAACR,IAsBJ,OApBAxC,IAAMc,WAAU,WACd,IAAMmC,EAAU,WACTH,SAASI,mBACZhB,EAAQiB,UAMZ,OAFAL,SAASM,iBAAiB,mBAAoBH,EAAS,CAAEI,SAAS,IAE3D,WACLP,SAASQ,oBAAoB,mBAAoBL,MAElD,CAACf,IAEJlC,IAAMc,WAAU,WACVZ,GACFqD,YAAerD,KAEhB,CAACA,IAGF,eAACwB,EAAD,CAAgBxB,IAAKC,EAArB,UACE,cAACwB,EAAD,CAAQ/B,MAAOwC,IACdK,EAAQe,KAAI,SAAC5D,GACZ,OAAIA,EAAQ,EAAU,KAClBA,GAAS0C,EAET,cAAC,EAAD,UACE,cAAC,IAAD,KADW1C,GAIbA,EAAQwC,GACRxC,EAAQwC,EADmB,cAAC1C,EAAD,CAAmBE,MAAOA,EAAOC,SAAU6C,GAA/B9C,GAEpC,cAACF,EAAD,CAAmBE,MAAOA,EAAOE,WAAY+C,EAAc9C,QAAM,GAArDH","file":"static/js/11.3522024e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport { NO_OP } from '../../../data/types'\r\nimport useIsOnScreen from '../../../hooks/useIsOnScreen'\r\nimport { selectPostByIndex } from '../../../redux/selectors'\r\nimport { ZIndex } from '../../../styled/zIndex'\r\nimport { Media } from '../../player/Media'\r\nconst Screen = styled.div`\r\n  min-height: 100vh;\r\n  min-width: 100vw;\r\n  max-height: 100vh;\r\n  max-width: 100vw;\r\n  scroll-snap-align: start;\r\n  scroll-snap-stop: always;\r\n\r\n  display: grid;\r\n\r\n  img,\r\n  video {\r\n    max-height: 100vh;\r\n    max-width: 100vw;\r\n    z-index: ${ZIndex.POST};\r\n  }\r\n\r\n  .overlay {\r\n    z-index: ${ZIndex.OVERLAY};\r\n  }\r\n\r\n  img,\r\n  video,\r\n  .overlay {\r\n    grid-area: 1/1/2/2;\r\n  }\r\n`\r\n\r\ninterface StoryProps {\r\n  index: number\r\n  onInView?: (index: number) => void\r\n  onFinished?: () => void\r\n  active?: boolean\r\n}\r\n\r\nexport default function Story(props: StoryProps) {\r\n  const { index, onInView, onFinished, active = false } = props\r\n  const [ref, setRef] = React.useState<HTMLElement | null>(null)\r\n  const [isInView] = useIsOnScreen(ref)\r\n  const { type, preview_url, sample_url, file_url, width, height } = useSelector(selectPostByIndex(index))\r\n\r\n  React.useEffect(() => {\r\n    if (active && ref) {\r\n      ref.scrollIntoView()\r\n    }\r\n  }, [active, ref])\r\n\r\n  React.useEffect(() => {\r\n    if (onInView && isInView) {\r\n      onInView(index)\r\n    }\r\n  }, [index, isInView, onInView])\r\n\r\n  return (\r\n    <Screen id={`story-${index}`} ref={setRef}>\r\n      <Media\r\n        type={type}\r\n        index={index}\r\n        thumbnailSrc={preview_url}\r\n        sampleSrc={sample_url}\r\n        fullSrc={file_url}\r\n        onLoad={NO_OP}\r\n        width={width}\r\n        height={height}\r\n        detailsVisible={false}\r\n        isFullscreen={true}\r\n        onFinished={onFinished}\r\n        isActive={isInView}\r\n      />\r\n    </Screen>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { openFullscreen } from '../../data/browserUtils'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { selectCount, selectFullsceenIndex } from '../../redux/selectors'\r\nimport { OutOfItems } from '../layout/LayoutOutOfItems'\r\nimport Story from '../layout/stories/Story'\r\n\r\nconst StoriesWrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow: scroll;\r\n  scroll-snap-type: y mandatory;\r\n  scroll-snap-stop: always;\r\n\r\n  ::-webkit-scrollbar {\r\n    height: 0px;\r\n    width: 0px;\r\n  }\r\n`\r\n\r\ntype FillerProps = {\r\n  index: number\r\n}\r\n\r\nconst Filler = styled.div(\r\n  ({ index }: FillerProps) => css`\r\n    height: ${Math.max(index - 1, 0)}00vh;\r\n  `\r\n)\r\n\r\nconst Screen = styled.div`\r\n  min-height: 100vh;\r\n  min-width: 100vw;\r\n  max-height: 100vh;\r\n  max-width: 100vw;\r\n\r\n  scroll-snap-align: start;\r\n  scroll-snap-stop: always;\r\n\r\n  display: grid;\r\n  place-content: center;\r\n\r\n  @media (pointer: fine) {\r\n    ::-webkit-scrollbar {\r\n      height: 0px;\r\n      width: 0px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Stories() {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const [ref, setRef] = React.useState<HTMLElement | null>(null)\r\n\r\n  const currentIdx = useSelector(selectFullsceenIndex)\r\n  const postCount = useSelector(selectCount)\r\n  const nextIdx = currentIdx + 1\r\n  const prevIdx = currentIdx - 1\r\n\r\n  const indexes = [prevIdx, currentIdx, nextIdx]\r\n\r\n  const setIndex = React.useCallback((index: number) => dispatch(setFullscreenPost(index)), [dispatch])\r\n\r\n  const scrollToNext = React.useCallback(() => {\r\n    document.getElementById(`story-${nextIdx}`)?.scrollIntoView({ behavior: 'smooth' })\r\n  }, [nextIdx])\r\n\r\n  React.useEffect(() => {\r\n    const handler = () => {\r\n      if (!document.fullscreenElement) {\r\n        history.goBack()\r\n      }\r\n    }\r\n\r\n    document.addEventListener('fullscreenchange', handler, { passive: true })\r\n\r\n    return () => {\r\n      document.removeEventListener('fullscreenchange', handler)\r\n    }\r\n  }, [history])\r\n\r\n  React.useEffect(() => {\r\n    if (ref) {\r\n      openFullscreen(ref)\r\n    }\r\n  }, [ref])\r\n\r\n  return (\r\n    <StoriesWrapper ref={setRef}>\r\n      <Filler index={currentIdx} />\r\n      {indexes.map((index) => {\r\n        if (index < 0) return null\r\n        if (index >= postCount)\r\n          return (\r\n            <Screen key={index}>\r\n              <OutOfItems />\r\n            </Screen>\r\n          )\r\n        if (index < currentIdx) return <Story key={index} index={index} onInView={setIndex} />\r\n        if (index > currentIdx) return <Story key={index} index={index} onInView={setIndex} />\r\n        return <Story key={index} index={index} onFinished={scrollToNext} active />\r\n      })}\r\n    </StoriesWrapper>\r\n  )\r\n}\r\n"],"sourceRoot":""}